// Generated by CoffeeScript 1.8.0
(function() {
    Dropbox.Chrome = (function() {
        function Chrome(clientOptions) {
            this.clientOptions = clientOptions;
            this._client = null;
            this._clientCallbacks = null;
            this._userInfo = null;
            this._userInfoCallbacks = null;
            this.onClient = new Dropbox.Util.EventSource;
        }

        Chrome.prototype.onClient = null;

        Chrome.prototype.client = function(callback) {
            var client;
            if (this._client) {
                callback(this._client);
                return this;
            }
            if (this._clientCallbacks) {
                this._clientCallbacks.push(callback);
                return this;
            }
            this._clientCallbacks = [callback];
            client = new Dropbox.Client(this.clientOptions);
            client.authDriver(new Dropbox.AuthDriver.ChromeExtension({
                receiverPath: 'html/dbox_oauth_receiver.html'
            }));
            client.authenticate({
                interactive: false
            }, (function(_this) {
                return function(error) {
                    var callbacks, _i, _len, _results;
                    client.onAuthStepChange.addListener(function() {
                        return _this._userInfo = null;
                    });
                    _this.onClient.dispatch(client);
                    _this._client = client;
                    callbacks = _this._clientCallbacks;
                    _this._clientCallbacks = null;
                    _results = [];
                    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
                        callback = callbacks[_i];
                        _results.push(callback(_this._client));
                    }
                    return _results;
                };
            })(this));
            return this;
        };

        Chrome.prototype.userInfo = function(callback) {
            var dispatchUserInfo;
            if (this._userInfo) {
                callback(this._userInfo);
                return this;
            }
            if (this._userInfoCallbacks) {
                this._userInfoCallbacks.push(callback);
                return this;
            }
            this._userInfoCallbacks = [callback];
            dispatchUserInfo = (function(_this) {
                return function() {
                    var callbacks, _i, _len, _results;
                    callbacks = _this._userInfoCallbacks;
                    _this._userInfoCallbacks = null;
                    _results = [];
                    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
                        callback = callbacks[_i];
                        _results.push(callback(_this._userInfo));
                    }
                    return _results;
                };
            })(this);
            chrome.storage.local.get('dropbox_js_userinfo', (function(_this) {
                return function(items) {
                    var parseError;
                    if (items && items.dropbox_js_userinfo) {
                        try {
                            _this._userInfo = Dropbox.AccountInfo.parse(items.dropbox_js_userinfo);
                            return dispatchUserInfo();
                        } catch (_error) {
                            parseError = _error;
                            _this._userInfo = null;
                        }
                    }
                    return _this.client(function(client) {
                        if (!client.isAuthenticated()) {
                            _this._userInfo = {};
                            return dispatchUserInfo();
                        }
                        return client.getUserInfo(function(error, userInfo) {
                            if (error) {
                                _this._userInfo = {};
                                return dispatchUserInfo();
                            }
                            return chrome.storage.local.set({
                                dropbox_js_userinfo: userInfo.json()
                            }, function() {
                                _this._userInfo = userInfo;
                                return dispatchUserInfo();
                            });
                        });
                    });
                };
            })(this));
            return this;
        };

        Chrome.prototype.signOut = function(callback) {
            return this.client((function(_this) {
                return function(client) {
                    if (!client.isAuthenticated()) {
                        return callback();
                    }
                    return client.signOut(function() {
                        _this._userInfo = null;
                        return chrome.storage.local.remove('dropbox_js_userinfo', function() {
                            return callback();
                        });
                    });
                };
            })(this));
        };

        return Chrome;

    })();

}).call(this);

//# sourceMappingURL=dropbox_chrome.js.map
